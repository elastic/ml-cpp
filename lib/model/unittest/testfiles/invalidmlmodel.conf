# This file configures various parameters to Ml's models.
# Reasonable default values are used for all parameters which are not
# explicitly set in this file.

[model]
# The rate at which the priors of the models learn per sample.
learnrate = fds

# The rate at which the priors of the models return to non-informative
# as a multiple of the bucket length.
decayrate = yh

# The increase, by a multiplicative factor, in the rate at which the
# model priors return to non-informative before we've had a chance
# to learn about trends. The higher the value the more the model is
# influenced by recent samples. These are expected to be closer in
# value than older samples if there is a significant trend (which
# hasn't been estimated).
initialdecayratemultiplier = -3.0

# The maximum number of times we'll update a model in a bucketing
# interval. This only applies to our metric statistics, which are
# computed on a fixed number of measurements rather than a fixed
# time interval. A value of zero implies no constraint.
maximumupdatesperbucket = -7.0

# The number of times to sample the person priors when computing
# total probabilities for population models.
totalprobabilitycalcsamplingsize = -7

# The minimum fraction of values which must be present in a mode for
# temporal analysis of individual time series.
individualmodefraction = -2.1

# The minimum fraction of values which must be present in a mode for                                                                                                                                      
# analysis of a population of time series.                                                                                                                                                                
populationmodefraction = -0.01

# The minimum fraction of values which must be present in a mode for                                                                                                                                      
# peer groups analysis of a population of time series.                                                                                                                                                    
peersmodefraction = yhyj

# The number of points to use to approximate each seasonal component.
# For each additional point, the model of a single time series will
# increase in size by approximately 32 bytes. So if n distinct time
# series are being modeled, the increase in the total process footprint
# will be approximately 32 * n bytes for each increment in the sum
# of these values.
componentsize = -10

# The amount by which metric sample count is reduced for fine-grained
# sampling when there is latency. Increasing the factor improves
# quality of sampling but also increases CPU/memory overhead.
samplecountfactor = -20

# The minimum size of the sliding prune window, relative to the decayrate
# of the model.
prunewindowscaleminimum = ds

# The maximum size of the sliding prune window, relative to the decayrate
# of the model.
prunewindowscalemaximum = ajk

[anomalyscore]
# The parameters which control the aggregation styles used for various
# types of result nodes. The layout is as follows:
#   [<person> <attribute> <detector>]
# where for each section there are four parameters in the following order:
#   <joint probability weight>,
#   <extreme probability weight>,
#   <min extreme samples>,
#   <max extreme samples>
# These should be in the ranges [0,1], [0,1], [1, 10], [1, 10] and control,
# respectively, the weight assigned to the joint probability calculation,
# the weight assigned to the extreme probability calculation, the minimum
# number of samples m to use in the m from n probability calculation and
# the maximum number of samples m to use in the m from n probability
# calculation.
aggregationstyleparams = 0.9 0.1 2 4 0.3 0.7 3 8 0.6 0.4 2

# The largest anomalous probability, i.e. the largest value for a
# probability which will have a non-zero anomaly score. More formally,
# if we assume we are performing a statistical test with
#   H0 = "system normal"
#   H1 = "system anomalous"
# Then this is probability of rejecting H0 when it is true, i.e.
# probability of type I errors.
# For consistency, it is best that this matches unusualprobabilitythreshold
# in mllimits.conf.
maximumanomalousprobability = x

# The percentile of the historical anomaly scores below which scores
# are assumed to be noise. Note that these are quoted as a percentage
# so in the range [0, 100].
noisepercentile = 110

# The slope of the line through the noise percentile score which bounds
# the anomaly score.
noisemultiplier = -3.0

# The normalized score rate limit knot points. In particular, specify
# pairs, space separated, such that the first element is the percentage
# of normalized scores which are less than the second element. For
# example, 50 1 70 2 90 5 95 10 97 20 99 40 would ensure that the
# smallest 50% of raw scores map to a normalized score less than or
# equal to 1, 70% map to a normalized score less than or equal to 2,
# 90% map to a score less than or equal to 5 and so on. The quantiles
# are interpolated to get a smooth map to normalized scores. The
# percentiles and scores must be monotonically increasing and there
# should be a one-one correspondence, i.e. number of values should
# be even. All values should be in the range (0, 100).
normalizedscoreknotpoints = 70.0 1.5  85.0 1.6  90.0 1.7  95.0 2.0  97.0 10.0  98.0 20.0  99.5 50.0 99.9
